package mvc.model.filter;

import java.util.HashMap;

import mvc.model.Log;
import mvc.model.abstractlayer.ProcessLayer;

/**
 * Class representing a lowpass filter object, designed with matlab the coefficients for a uniform FIR filters with a pass of 1500Hz 
 * and stop of 1750 were taken and explicitly assigned to the class. 
 * 
 * @author Anthony Timotheou
 *
 */
public class lowPassFilter extends ProcessLayer {
	public lowPassFilter(Log log) {
    super(log);
    name = "Low Pass Filter";
  }

  /**
 * Global model parameters
 * @uml.property  name="mp"
 */
  HashMap<String, String> mp;
  
  //TODO add order of matlab designed filter, check coefficients size
	/**
	 * coefficients taken from matlab for lowpass filter 1500Hz pass 1750Hz stop, Equiripple design.
	 * @uml.property  name="coefficients" multiplicity="(0 -1)" dimension="1"
	 */
	double[] coefficients = {7.8157e-005,4.8064e-005,5.9488e-005,6.9784e-005,7.7675e-005,8.1651e-005,8e-005,7.0934e-005,5.2552e-005,2.2924e-005,-1.9794e-005,-7.7118e-005,-0.00015044,-0.00024078,-0.00034842,-0.00047335,-0.00061462,-0.00077078,-0.0009395,-0.0011177,-0.0013017,-0.0014871,-0.0016687,-0.0018413,-0.0019993,-0.0021368,-0.0022483,-0.0023288,-0.0023736,-0.002379,-0.0023423,-0.0022621,-0.0021382,-0.0019721,-0.0017666,-0.0015261,-0.0012564,-0.00096448,-0.00065849,-0.00034737,-4.0563e-005,0.00025231,0.00052185,0.0007592,0.0009565,0.0011071,0.0012061,0.0012503,0.0012387,0.0011722,0.0010543,0.00089012,0.00068705,0.00045402,0.00020133,-5.9799e-005,-0.00031766,-0.00056057,-0.00077739,-0.00095803,-0.0010939,-0.0011783,-0.0012068,-0.0011775,-0.0010911,-0.00095111,-0.00076343,-0.00053636,-0.00028022,-6.8956e-006,0.00027072,0.00053926,0.00078554,0.00099719,0.0011633,0.0012748,0.0013252,0.0013108,0.001231,0.0010883,0.00088842,0.00063999,0.0003542,4.4332e-005,-0.0002748,-0.00058757,-0.00087829,-0.001132,-0.0013351,-0.0014763,-0.0015469,-0.0015418,-0.0014591,-0.0013011,-0.0010736,-0.0007863,-0.00045194,-8.603e-005,0.00029395,0.00066931,0.0010211,0.001331,0.0015824,0.0017609,0.0018556,0.0018593,0.0017694,0.0015877,0.0013207,0.00097941,0.00057894,0.00013773,-0.00032317,-0.00078111,-0.0012129,-0.001596,-0.0019097,-0.0021361,-0.0022611,-0.0022754,-0.002175,-0.0019616,-0.0016423,-0.0012303,-0.00074334,-0.00020389,0.00036246,0.00092791,0.0014638,0.0019422,0.0023371,0.0026258,0.0027905,0.0028188,0.0027049,0.0024501,0.0020626,0.0015579,0.00095767,0.0002891,-0.00041616,-0.0011236,-0.0017975,-0.0024026,-0.0029058,-0.0032783,-0.0034967,-0.0035446,-0.0034137,-0.0031043,-0.0026259,-0.0019967,-0.0012432,-0.00039917,0.00049589,0.0013985,0.0022631,0.0030445,0.0036999,0.0041913,0.0044874,0.0045657,0.0044137,0.0040299,0.0034245,0.0026192,0.0016467,0.0005494,-0.0006224,-0.0018124,-0.0029611,-0.0040084,-0.0048967,-0.0055739,-0.0059961,-0.0061299,-0.005955,-0.0054654,-0.0046707,-0.0035958,-0.002281,-0.00078052,0.00083965,0.002504,0.0041309,0.0056362,0.0069369,0.0079556,0.0086241,0.0088874,0.0087066,0.0080623,0.0069561,0.0054118,0.0034758,0.0012165,-0.0012778,-0.0039014,-0.0065345,-0.0090478,-0.011307,-0.013179,-0.014535,-0.01526,-0.015253,-0.014436,-0.012756,-0.010187,-0.0067367,-0.0024412,0.0026303,0.0083787,0.014677,0.021376,0.028305,0.035281,0.042113,0.048609,0.054583,0.059862,0.064287,0.067729,0.070083,0.071278,0.071278,0.070083,0.067729,0.064287,0.059862,0.054583,0.048609,0.042113,0.035281,0.028305,0.021376,0.014677,0.0083787,0.0026303,-0.0024412,-0.0067367,-0.010187,-0.012756,-0.014436,-0.015253,-0.01526,-0.014535,-0.013179,-0.011307,-0.0090478,-0.0065345,-0.0039014,-0.0012778,0.0012165,0.0034758,0.0054118,0.0069561,0.0080623,0.0087066,0.0088874,0.0086241,0.0079556,0.0069369,0.0056362,0.0041309,0.002504,0.00083965,-0.00078052,-0.002281,-0.0035958,-0.0046707,-0.0054654,-0.005955,-0.0061299,-0.0059961,-0.0055739,-0.0048967,-0.0040084,-0.0029611,-0.0018124,-0.0006224,0.0005494,0.0016467,0.0026192,0.0034245,0.0040299,0.0044137,0.0045657,0.0044874,0.0041913,0.0036999,0.0030445,0.0022631,0.0013985,0.00049589,-0.00039917,-0.0012432,-0.0019967,-0.0026259,-0.0031043,-0.0034137,-0.0035446,-0.0034967,-0.0032783,-0.0029058,-0.0024026,-0.0017975,-0.0011236,-0.00041616,0.0002891,0.00095767,0.0015579,0.0020626,0.0024501,0.0027049,0.0028188,0.0027905,0.0026258,0.0023371,0.0019422,0.0014638,0.00092791,0.00036246,-0.00020389,-0.00074334,-0.0012303,-0.0016423,-0.0019616,-0.002175,-0.0022754,-0.0022611,-0.0021361,-0.0019097,-0.001596,-0.0012129,-0.00078111,-0.00032317,0.00013773,0.00057894,0.00097941,0.0013207,0.0015877,0.0017694,0.0018593,0.0018556,0.0017609,0.0015824,0.001331,0.0010211,0.00066931,0.00029395,-8.603e-005,-0.00045194,-0.0007863,-0.0010736,-0.0013011,-0.0014591,-0.0015418,-0.0015469,-0.0014763,-0.0013351,-0.001132,-0.00087829,-0.00058757,-0.0002748,4.4332e-005,0.0003542,0.00063999,0.00088842,0.0010883,0.001231,0.0013108,0.0013252,0.0012748,0.0011633,0.00099719,0.00078554,0.00053926,0.00027072,-6.8956e-006,-0.00028022,-0.00053636,-0.00076343,-0.00095111,-0.0010911,-0.0011775,-0.0012068,-0.0011783,-0.0010939,-0.00095803,-0.00077739,-0.00056057,-0.00031766,-5.9799e-005,0.00020133,0.00045402,0.00068705,0.00089012,0.0010543,0.0011722,0.0012387,0.0012503,0.0012061,0.0011071,0.0009565,0.0007592,0.00052185,0.00025231,-4.0563e-005,-0.00034737,-0.00065849,-0.00096448,-0.0012564,-0.0015261,-0.0017666,-0.0019721,-0.0021382,-0.0022621,-0.0023423,-0.002379,-0.0023736,-0.0023288,-0.0022483,-0.0021368,-0.0019993,-0.0018413,-0.0016687,-0.0014871,-0.0013017,-0.0011177,-0.0009395,-0.00077078,-0.00061462,-0.00047335,-0.00034842,-0.00024078,-0.00015044,-7.7118e-005,-1.9794e-005,2.2924e-005,5.2552e-005,7.0934e-005,8e-005,8.1651e-005,7.7675e-005,6.9784e-005,5.9488e-005,4.8064e-005,7.8157e-005};;
	
	/**
	 * holds left and right ear sounds of the audio once it's been passed through the coefficients, thus, filtered.
	 * @uml.property  name="filteredAudio" multiplicity="(0 -1)" dimension="2"
	 */
	double[][] filteredAudio = null;
	
	/**
	 * Finite Impulse Respone Filter for the left ear sounds
	 * @uml.property  name="f"
	 * @uml.associationEnd  
	 */
	FIR f = null;
	
	/**
	 * Finite Impulse Respone Filter for the right ear sounds
	 * @uml.property  name="f2"
	 * @uml.associationEnd  
	 */
	FIR f2 = null;
	
	public FIR getF() {
    return f;
  }

  public FIR getF2() {
    return f2;
  }
  
  @Override
	public double[][] execute(double[][] input) {
	  log.addSection("Low Pass Filter");
	  log.addn("Executing..");
	  
	  int leftEarLength = input[0].length;
    int rightEarLength = input[1].length;
	  filteredAudio = new double[2][Math.max(leftEarLength, rightEarLength)]; // get size from first ear audio, assumes both same length
	  
	  for (int j = 0; j < input[0].length; j++) {
	    if (j < leftEarLength) {
	      filteredAudio[0][j] = f.getOutputSample(input[0][j]);
	    }
	    
	    if (j < rightEarLength) {
	      filteredAudio[1][j] = f2.getOutputSample(input[1][j]);
      }
		}
	  
	  log.addn("Executed Successfully.");
	  
		return filteredAudio;
	}

	@Override
	public void setup(HashMap<String, String> mp) {
		this.mp = mp; 
		f = new FIR(coefficients); // create new Finite Impulse Response Filter Objects based on coefficients of low pass filter
		f2 = new FIR(coefficients);
	}

}
